<?php

if (is_int($a) || is_float($a)) {
	echo $a;
}
var_dump($a);
-----
Block#1
    Expr_FuncCall
        name: LITERAL('is_int')
        args[0]: TEMP(#1 <VARIABLE($a)>)
        result: TEMP(#2)
    Stmt_JumpIf
        cond: TEMP(#2)
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_Assertion
        expr: TEMP(#1 <VARIABLE($a)>)
        result: TEMP(#3 <VARIABLE($a)>)
        assert: LITERAL('int')
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_Assertion
        expr: TEMP(#1 <VARIABLE($a)>)
        result: TEMP(#4 <VARIABLE($a)>)
        assert: not(LITERAL('int'))
    Expr_FuncCall
        name: LITERAL('is_float')
        args[0]: TEMP(#4 <VARIABLE($a)>)
        result: TEMP(#5)
    Expr_Cast_Bool
        expr: TEMP(#5)
        result: TEMP(#6)
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#3
    Parent: Block#2
    TEMP(#7) = Phi(LITERAL(true), TEMP(#6))
    TEMP(#8 <VARIABLE($a)>) = Phi(TEMP(#4 <VARIABLE($a)>), TEMP(#3 <VARIABLE($a)>))
    Stmt_JumpIf
        cond: TEMP(#7)
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_Assertion
        expr: TEMP(#8 <VARIABLE($a)>)
        result: TEMP(#9 <VARIABLE($a)>)
        assert: LITERAL('int')|LITERAL('float')
    Terminal_Echo
        expr: TEMP(#9 <VARIABLE($a)>)
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Expr_Assertion
        expr: TEMP(#8 <VARIABLE($a)>)
        result: TEMP(#10 <VARIABLE($a)>)
        assert: not(LITERAL('int')|LITERAL('float'))
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    TEMP(#11 <VARIABLE($a)>) = Phi(TEMP(#9 <VARIABLE($a)>), TEMP(#10 <VARIABLE($a)>))
    Expr_FuncCall
        name: LITERAL('var_dump')
        args[0]: TEMP(#11 <VARIABLE($a)>)
        result: TEMP(#12)
    Terminal_Return