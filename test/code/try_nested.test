<?php

try {
    try {
        echo "nested try";
    } 
    catch(Exception1 $e1) {
        echo $e1;
    }
    finally {
        return true;
    }
} catch(Exception2 $e2) {
    echo $e2;
} finally {
    return false;
}
-----
Block#1
    Stmt_Try
        catchTypes[0]: Exception2
        catchVars[0]: TEMP(#1 <VARIABLE($e2)>)
        body: Block#2
        catch[0]: Block#3
        finally: Block#4

Block#2
    Parent: Block#1
        catchTarget<Exception2>(TEMP(#1 <VARIABLE($e2)>)): Block#3
        finallyTarget: Block#4
    Stmt_Try
        catchTypes[0]: Exception1
        catchVars[0]: TEMP(#2 <VARIABLE($e1)>)
        body: Block#5
        catch[0]: Block#6
        finally: Block#7

Block#3
    Parent: Block#2
    Parent: Block#7
        finallyTarget: Block#4
    TEMP(#3 <VARIABLE($e2)>) = Phi(TEMP(#1 <VARIABLE($e2)>), TEMP(#4 <VARIABLE($e2)>))
    Terminal_Echo
        expr: TEMP(#3 <VARIABLE($e2)>)
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Parent: Block#7
    Expr_ConstFetch
        name: LITERAL('false')
        result: TEMP(#5)
    Terminal_Return
        expr: TEMP(#5)

Block#5
    Parent: Block#2
        catchTarget<Exception1>(TEMP(#2 <VARIABLE($e1)>)): Block#6
        finallyTarget: Block#7
    Terminal_Echo
        expr: LITERAL('nested try')
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#5
        finallyTarget: Block#7
    Terminal_Echo
        expr: TEMP(#2 <VARIABLE($e1)>)
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
        catchTarget<Exception2>(TEMP(#1 <VARIABLE($e2)>)): Block#3
        finallyTarget: Block#4
    Expr_ConstFetch
        name: LITERAL('true')
        result: TEMP(#6)
    Terminal_Return
        expr: TEMP(#6)