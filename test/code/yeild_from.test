<?php
function gen_one_to_three() {
    for ($i = 1; $i <= 3; $i++) {
        // Note that $i is preserved between yields.
        yield $i;
    }
}
function gen_zero_four() {
    yield 0;
    yield from gen_one_to_three();
    yield 4;
}
-----
Block#1
    Stmt_Function
        name: gen_one_to_three
    Stmt_Function
        name: gen_zero_four
    Terminal_Return

Function 'gen_one_to_three': mixed
Block#1
    Expr_Assign
        var: TEMP(#1 <VARIABLE($i)>)
        expr: LITERAL(1)
        result: TEMP(#2)
    Stmt_Jump
        target: Block#2

Block#2
    Parent: Block#1
    Parent: Block#5
    TEMP(#3 <VARIABLE($i)>) = Phi(TEMP(#1 <VARIABLE($i)>), TEMP(#4 <VARIABLE($i)>))
    Expr_BinaryOp_SmallerOrEqual
        left: TEMP(#3 <VARIABLE($i)>)
        right: LITERAL(3)
        result: TEMP(#5)
    Stmt_JumpIf
        cond: TEMP(#5)
        if: Block#3
        else: Block#4

Block#3
    Parent: Block#2
    Expr_Yield
        key: TEMP(#3 <VARIABLE($i)>)
        result: TEMP(#6)
    Stmt_Jump
        target: Block#5

Block#4
    Parent: Block#2
    Terminal_Return

Block#5
    Parent: Block#3
    Expr_BinaryOp_Plus
        left: TEMP(#3 <VARIABLE($i)>)
        right: LITERAL(1)
        result: TEMP(#7)
    Expr_Assign
        var: TEMP(#4 <VARIABLE($i)>)
        expr: TEMP(#7)
        result: TEMP(#8)
    Stmt_Jump
        target: Block#2

Function 'gen_zero_four': mixed
Block#1
    Expr_Yield
        key: LITERAL(0)
        result: TEMP(#1)
    Expr_FuncCall
        name: LITERAL('gen_one_to_three')
        result: TEMP(#2)
    Expr_YieldFrom
        expr: TEMP(#2)
        result: TEMP(#3)
    Expr_Yield
        key: LITERAL(4)
        result: TEMP(#4)
    Terminal_Return
