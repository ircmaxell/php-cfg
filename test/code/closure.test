<?php

$b = 1;
$c = 2;
$fn = function($a) use($b, &$c) {
    $c += $b * $a;
};
$fn(3);
var_dump($c);
-----
Block#1
    Expr_Assign
        var: TEMP(#1 <VARIABLE($b)>)
        expr: LITERAL(1)
        result: TEMP(#2)
    Expr_Assign
        var: TEMP(#3 <VARIABLE($c)>)
        expr: LITERAL(2)
        result: TEMP(#4)
    Expr_Closure
        name: {anonymous}#1
        useVars[0]: VARIABLE(local $b)
        useVars[1]: VARIABLE(local &$c)
        result: TEMP(#5)
    Expr_Assign
        var: TEMP(#6 <VARIABLE($fn)>)
        expr: TEMP(#5)
        result: TEMP(#7)
    Expr_FuncCall
        name: TEMP(#6 <VARIABLE($fn)>)
        args[0]: LITERAL(3)
        result: TEMP(#8)
    Expr_FuncCall
        name: LITERAL('var_dump')
        args[0]: TEMP(#3 <VARIABLE($c)>)
        result: TEMP(#9)
    Terminal_Return

Function '{anonymous}#1': mixed
Block#1
    Expr_Param
        declaredType: mixed
        name: LITERAL('a')
        result: TEMP(#1 <VARIABLE($a)>)
    Expr_BinaryOp_Mul
        left: TEMP(#2 <VARIABLE($b)>)
        right: TEMP(#1 <VARIABLE($a)>)
        result: TEMP(#3)
    Expr_BinaryOp_Plus
        left: TEMP(#4 <VARIABLE($c)>)
        right: TEMP(#3)
        result: TEMP(#5)
    Expr_Assign
        var: TEMP(#6 <VARIABLE($c)>)
        expr: TEMP(#5)
        result: TEMP(#7)
    Terminal_Return